// generated by Fast Light User Interface Designer (fluid) version 1.0110

#include "plotViewerUI.h"

void plotViewerUI::cb_updateStateManually_i(Fl_Round_Button*, void*) {
  plotWin->setUpdateStateManually((bool) updateStateManually->value());
if(updateStateManually->value()) {
  updateState->activate();
} else {
  updateState->deactivate();
};
}
void plotViewerUI::cb_updateStateManually(Fl_Round_Button* o, void* v) {
  ((plotViewerUI*)(o->parent()->parent()->parent()->user_data()))->cb_updateStateManually_i(o,v);
}

void plotViewerUI::cb_updateState_i(Fl_Button*, void*) {
  plotWin->updateState();
plotWin->damage(1);
}
void plotViewerUI::cb_updateState(Fl_Button* o, void* v) {
  ((plotViewerUI*)(o->parent()->parent()->parent()->user_data()))->cb_updateState_i(o,v);
}

void plotViewerUI::cb_clearAllSelections_i(Fl_Button*, void*) {
  plotWin->clearAllSelections();
plotWin->damage(1);
}
void plotViewerUI::cb_clearAllSelections(Fl_Button* o, void* v) {
  ((plotViewerUI*)(o->parent()->parent()->parent()->user_data()))->cb_clearAllSelections_i(o,v);
}

void plotViewerUI::cb_saveActivePlot_i(Fl_Button*, void*) {
  plotWin->saveActivePlot();
plotWin->damage(1);
}
void plotViewerUI::cb_saveActivePlot(Fl_Button* o, void* v) {
  ((plotViewerUI*)(o->parent()->parent()->parent()->user_data()))->cb_saveActivePlot_i(o,v);
}

void plotViewerUI::cb_clearSavedPlots_i(Fl_Button*, void*) {
  plotWin->clearSavedPlots();
plotWin->damage(1);
}
void plotViewerUI::cb_clearSavedPlots(Fl_Button* o, void* v) {
  ((plotViewerUI*)(o->parent()->parent()->parent()->user_data()))->cb_clearSavedPlots_i(o,v);
}

void plotViewerUI::cb_savePlotsToPLT_i(Fl_Button*, void*) {
  std::string fName = std::string(filename->value());
plotWin->savePlotsToPLT(fName);
}
void plotViewerUI::cb_savePlotsToPLT(Fl_Button* o, void* v) {
  ((plotViewerUI*)(o->parent()->parent()->parent()->user_data()))->cb_savePlotsToPLT_i(o,v);
}

void plotViewerUI::cb_savePlotsToAGR_i(Fl_Button*, void*) {
  std::string fName = std::string(filename->value());
plotWin->savePlotsToAGR(fName);
}
void plotViewerUI::cb_savePlotsToAGR(Fl_Button* o, void* v) {
  ((plotViewerUI*)(o->parent()->parent()->parent()->user_data()))->cb_savePlotsToAGR_i(o,v);
}

plotViewerUI::plotViewerUI(const char *datafile, bool useExistingOptFile, const char *optfile, bool useThreshold, float threshold) {
  { Fl_Double_Window* o = mainWin = new Fl_Double_Window(772, 767);
    mainWin->color((Fl_Color)38);
    mainWin->user_data((void*)(this));
    { plotWindow* o = plotWin = new plotWindow(0, 0, 760, 540);
      plotWin->box(FL_NO_BOX);
      plotWin->color((Fl_Color)FL_BACKGROUND_COLOR);
      plotWin->selection_color((Fl_Color)FL_BACKGROUND_COLOR);
      plotWin->labeltype(FL_NORMAL_LABEL);
      plotWin->labelfont(0);
      plotWin->labelsize(14);
      plotWin->labelcolor((Fl_Color)FL_FOREGROUND_COLOR);
      plotWin->align(FL_ALIGN_BOTTOM);
      plotWin->when(FL_WHEN_RELEASE);
      o->mode(FL_DOUBLE|FL_ALPHA|FL_RGB|FL_DEPTH);
    } // plotWindow* plotWin
    { Controls = new Fl_Group(5, 538, 758, 222);
      Controls->box(FL_UP_BOX);
      Controls->color((Fl_Color)37);
      Controls->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { selectedSegmentText = new Fl_Text_Display(19, 673, 324, 80, "Information for selected feature");
        selectedSegmentText->hide();
      } // Fl_Text_Display* selectedSegmentText
      { stateBehavior = new Fl_Group(559, 561, 190, 90, "State Behavior");
        stateBehavior->box(FL_DOWN_BOX);
        stateBehavior->color((Fl_Color)41);
        { updateStateManually = new Fl_Round_Button(569, 608, 105, 20, "Update State Manually");
          updateStateManually->down_box(FL_ROUND_DOWN_BOX);
          updateStateManually->callback((Fl_Callback*)cb_updateStateManually);
        } // Fl_Round_Button* updateStateManually
        { updateState = new Fl_Button(579, 574, 150, 30, "Update State");
          updateState->color((Fl_Color)44);
          updateState->callback((Fl_Callback*)cb_updateState);
          updateState->deactivate();
        } // Fl_Button* updateState
        stateBehavior->end();
      } // Fl_Group* stateBehavior
      { subselection = new Fl_Group(357, 561, 188, 90, "Subselection");
        subselection->box(FL_DOWN_BOX);
        subselection->color((Fl_Color)41);
        { clearAllSelections = new Fl_Button(373, 590, 150, 30, "Clear All Selections");
          clearAllSelections->color((Fl_Color)44);
          clearAllSelections->callback((Fl_Callback*)cb_clearAllSelections);
        } // Fl_Button* clearAllSelections
        subselection->end();
      } // Fl_Group* subselection
      { plotting = new Fl_Group(18, 561, 325, 114, "Plotting");
        plotting->box(FL_DOWN_BOX);
        plotting->color((Fl_Color)41);
        { saveActivePlot = new Fl_Button(29, 575, 150, 30, "Save active plot");
          saveActivePlot->color((Fl_Color)44);
          saveActivePlot->callback((Fl_Callback*)cb_saveActivePlot);
        } // Fl_Button* saveActivePlot
        { clearSavedPlots = new Fl_Button(179, 575, 150, 30, "Clear saved plots");
          clearSavedPlots->color((Fl_Color)44);
          clearSavedPlots->callback((Fl_Callback*)cb_clearSavedPlots);
        } // Fl_Button* clearSavedPlots
        { savePlotsToPLT = new Fl_Button(29, 605, 150, 30, "Save plots to .plt");
          savePlotsToPLT->color((Fl_Color)44);
          savePlotsToPLT->callback((Fl_Callback*)cb_savePlotsToPLT);
        } // Fl_Button* savePlotsToPLT
        { filename = new Fl_Input(179, 604, 150, 30, "filename");
          filename->labeltype(FL_ENGRAVED_LABEL);
          filename->align(FL_ALIGN_BOTTOM_RIGHT);
        } // Fl_Input* filename
        { savePlotsToAGR = new Fl_Button(30, 635, 150, 30, "Save plots to .agr");
          savePlotsToAGR->color((Fl_Color)44);
          savePlotsToAGR->callback((Fl_Callback*)cb_savePlotsToAGR);
        } // Fl_Button* savePlotsToAGR
        plotting->end();
      } // Fl_Group* plotting
      Controls->end();
    } // Fl_Group* Controls
    o->label(datafile);
    mainWin->end();
    mainWin->resizable(mainWin);
  } // Fl_Double_Window* mainWin
  plotWin->initialize(datafile, useExistingOptFile, optfile, useThreshold, threshold, selectedSegmentText);
}

void plotViewerUI::show(int argc, char **argv) {
  mainWin->show(argc, argv);
}
